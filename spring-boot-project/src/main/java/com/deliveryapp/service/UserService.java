package com.deliveryapp.service;

import com.deliveryapp.entity.User;
import com.deliveryapp.exception.BadRequestException;
import com.deliveryapp.model.dto.user.LoginRequestUserDTO;
import com.deliveryapp.model.dto.user.RegisterUserRequestDto;
import com.deliveryapp.model.dto.user.UserResponseDto;
import com.deliveryapp.model.dto.user.UserWithoutPasswordDto;
import com.deliveryapp.repository.UserRepository;
import com.deliveryapp.utils.UserUtils;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public UserResponseDto login(LoginRequestUserDTO dto) {
        String email = dto.getEmail();
        String password = dto.getPassword();
        Optional<User> userFromDb = userRepository.findByEmail(email);
        if (userFromDb.isEmpty()) {
            throw new EntityNotFoundException("Wrong email!");
        }
        String passwordFromDb = userFromDb.get().getPassword();
        if (!passwordEncoder.matches(password, passwordFromDb)) {
            throw new EntityNotFoundException("Wrong password!");
        }
//        return modelMapper.map(userFromDb, UserWithoutPasswordDTO.class);
        return null;
    }

    public UserWithoutPasswordDto forgottenPassword(String email) {
        Optional<User> user = userRepository.findByEmail(email);
        if (user.isEmpty()) {
            throw new EntityNotFoundException("Email not found!");
//        }
//        String password = UserUtility.generateRandomPassword();
//        if (!UserUtility.isValidPass(password)) {
//            throw new BadRequestException("Bad password generated!");
//        }
//        String msg = "Your new autogenerated password is: \n " +
//                password + " \n" +
//                "You can change it anytime in account settings.";
//        new Thread(() -> emailService.sendSimpleMessage(email, "Password recovery", msg)).start();
//        user.setPassword(passwordEncoder.encode(password));
//        return modelMapper.map(userRepository.save(user), UserWithoutPasswordDTO.class);
        }

        return null;
//    }
    }

    public Object registerUser(RegisterUserRequestDto dto) throws IllegalAccessException, BadRequestException {
        Optional<User> userFromDb = userRepository.findByEmail(dto.getEmail());
        if (userFromDb.isPresent()) {
            throw new IllegalAccessException(String.format("There is an account with that email address: "
                    + dto.getEmail()));
        }
        if (!UserUtils.isValidEmail(dto.getEmail())) {
            throw new IllegalAccessException(String.format("Invalid email format!: "
                    + dto.getEmail()));
        }


    }
}
